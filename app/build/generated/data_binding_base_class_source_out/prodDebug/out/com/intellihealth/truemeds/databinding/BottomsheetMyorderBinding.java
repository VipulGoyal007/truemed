// Generated by data binding compiler. Do not edit!
package com.intellihealth.truemeds.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import androidx.recyclerview.widget.RecyclerView;
import com.intellihealth.salt.views.TextView;
import com.intellihealth.salt.views.buttons.Button;
import com.intellihealth.salt.views.cards.Divider;
import com.intellihealth.truemeds.R;
import com.intellihealth.truemeds.presentation.viewmodel.OrdersTabViewModel;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class BottomsheetMyorderBinding extends ViewDataBinding {
  @NonNull
  public final Button btnApply;

  @NonNull
  public final Button btnClear;

  @NonNull
  public final ConstraintLayout clApply;

  @NonNull
  public final ConstraintLayout clButtonView;

  @NonNull
  public final ConstraintLayout clClear;

  @NonNull
  public final ConstraintLayout clSelectType;

  @NonNull
  public final ConstraintLayout clShowList;

  @NonNull
  public final Divider divider;

  @NonNull
  public final ConstraintLayout entireListingView;

  @NonNull
  public final ConstraintLayout helpTopHeader;

  @NonNull
  public final AppCompatImageView ivClose;

  @NonNull
  public final ConstraintLayout parentLayout;

  @NonNull
  public final RecyclerView rvOrderList;

  @NonNull
  public final RecyclerView rvPatientList;

  @NonNull
  public final TextView tvOrderStatus;

  @NonNull
  public final TextView tvPatients;

  @NonNull
  public final TextView tvSubCategoryTitle;

  @Bindable
  protected OrdersTabViewModel mViewModel;

  protected BottomsheetMyorderBinding(Object _bindingComponent, View _root, int _localFieldCount,
      Button btnApply, Button btnClear, ConstraintLayout clApply, ConstraintLayout clButtonView,
      ConstraintLayout clClear, ConstraintLayout clSelectType, ConstraintLayout clShowList,
      Divider divider, ConstraintLayout entireListingView, ConstraintLayout helpTopHeader,
      AppCompatImageView ivClose, ConstraintLayout parentLayout, RecyclerView rvOrderList,
      RecyclerView rvPatientList, TextView tvOrderStatus, TextView tvPatients,
      TextView tvSubCategoryTitle) {
    super(_bindingComponent, _root, _localFieldCount);
    this.btnApply = btnApply;
    this.btnClear = btnClear;
    this.clApply = clApply;
    this.clButtonView = clButtonView;
    this.clClear = clClear;
    this.clSelectType = clSelectType;
    this.clShowList = clShowList;
    this.divider = divider;
    this.entireListingView = entireListingView;
    this.helpTopHeader = helpTopHeader;
    this.ivClose = ivClose;
    this.parentLayout = parentLayout;
    this.rvOrderList = rvOrderList;
    this.rvPatientList = rvPatientList;
    this.tvOrderStatus = tvOrderStatus;
    this.tvPatients = tvPatients;
    this.tvSubCategoryTitle = tvSubCategoryTitle;
  }

  public abstract void setViewModel(@Nullable OrdersTabViewModel viewModel);

  @Nullable
  public OrdersTabViewModel getViewModel() {
    return mViewModel;
  }

  @NonNull
  public static BottomsheetMyorderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.bottomsheet_myorder, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static BottomsheetMyorderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<BottomsheetMyorderBinding>inflateInternal(inflater, R.layout.bottomsheet_myorder, root, attachToRoot, component);
  }

  @NonNull
  public static BottomsheetMyorderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.bottomsheet_myorder, null, false, component)
   */
  @NonNull
  @Deprecated
  public static BottomsheetMyorderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<BottomsheetMyorderBinding>inflateInternal(inflater, R.layout.bottomsheet_myorder, null, false, component);
  }

  public static BottomsheetMyorderBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static BottomsheetMyorderBinding bind(@NonNull View view, @Nullable Object component) {
    return (BottomsheetMyorderBinding)bind(component, view, R.layout.bottomsheet_myorder);
  }
}
